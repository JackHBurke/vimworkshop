-------------------------------------------------------------------
					WELCOME TO THIS VIM WORKSHOP
-------------------------------------------------------------------

Vim is great, look at how shiny and pretty this is!

This workshop is geared towards people who have a small ammount of 
exprience with vim, but will be accessible to those with no experience

If you have not used vim before, spend some time with the next couple of lessons

If you have used vim, skip to the next section to follow along
	* Move down there by holding j, hitting ^d, or hitting /COUNTS 

If you are a vim guru, and are using this time to shame me, search through
the file as you see fit to see if this will be any help for you.

-------------------------------------------------------------------
						THE BASICS

If this experience is scary for you, hit <ESC> a bunch, then hit :q!
Ensure that you are in normal mode by hitting escape

		^				Movement in vim is done with h, j, k, and l
		k				
< h           l >		h moves left, j moves down, k move up, and l right. 
		j				Keep your hands at your normal spot on the home row,
		v				this allows you to move around vim without moving your
						hands much.
------------------
DELETION

Character deletion in vim is done by hitting 
	x to delete the character under the cursor

Tryyy this byy movvving tthrough thiiis sentannce to fiix thhe erroors.

------------------
INSERTION

Insertion is done by being in insert mode, which you enter by hitting 
	- i to insert text (insert)
You exit insert mode by hitting <ESC>

Try to fx ths sentnce by ading txt to it.

***If this seems slow to you, it should, you will learn quicker ways to do this
****Literally the point of this workshop

------------------
SAVING AND EXITING

To save your work in vim, be in normal mode, then 
	hit : to begin typing a command at the bottom of your screen. Then 
	hit w and enter 
		:w

To exit vim, do the command 
	:q

Try saving this file with the changes that you have made, then quiting
and reopening the file.

You can combine these commands to write and quit by doing
	:wq

***Alternatively you can type ZZ while in normal mode

:q! will exit without saving

------------------
BASICS RECAP

	x - Delete the character under the cursor
	
	i - Enter into insert mode, press <ESC> to exit it
	
	:w - Saves the files
	
	:q - Exits the file (if no changes were made since saving)
	
	:wq - Saves and exits the file
	
	ZZ - Saves and exits the file

	:q! - Exits the file without saving

------------------

And this ends the basic information you need (somewhat)

Now we begin with a concept that will come up in the next chapters;
Using a number to preform an action that many times

--------------------------------------------------------------------
							COUNTS

Most every action in vim can be done multipe times by entering a number before
the action. This becomes incredibly useful for repetitive tasks.

Look at the line number of this line. Type in this number then hit k to go
to the top of the document. Hit the same number then j to come back down.
**** 95k, 95j

This can be applied to deletion too, as 5x will delete 5 characters after the 
cursor.

Delete this line word by word using x.

***You will need 1 extra for the spaces

--------------------------------------------------------------------
							MOVEMENT

There are many different ways to get around in vim, moving large and small
distances, relative and absolute distances, and moving to specific places.

------------------
LARGE MOVEMENT

The biggest move you can make, would be to move from the top of a file, to
the bottom, so lets start there.

	gg - puts you at the top of a file, 
	G - puts you at the bottom

***BEFORE YOU TEST THIS***
***<-- look at this line number and type :(put line number jack) to get back
Now go to the top, bottom, and come back

In order to traverse a document based on large jumps, 
	hit ^f to go forward a page (^forward)
	or  ^b to go backwards a page (^backward)

In less large jumps,
	hit ^u to go up a half page (^up)
	or ^d to go down a half page (^down)

Mess around with this, it can allow you to look at the future chapters in
this document

-----------------
ABSOLUTE MOVEMENT

In vim, if you know the line number, (or generally the line number that
you want to get to) you can travel to that line

***if for some reason you dont have line numbers, enter 
	:set nu - to set the line numbers for the file

	:number - Will put your cursor onto the the line "number"

Remember any of the line numbers around this section, then try this 
absolute movement to move to different areas.

Enter in the first word on line 300: 
Enter in the last word on line 50:

-----------------
SMALL MOVEMENT

Most all of your important movement in vim is small movements on a line, or 
around a line. While you can use hjkl to move around, generally there is a 
more effecient way. 

	w - move to the start of the next word (word)
	e - move to the end of the word (end)
	b - move backwards to the start of the word (back)
	ge - move backwards to the end of the word (go back end?)

DDelete tthe ffirst ccharacter oof eeach wword iin tthis ssentance

Deletee thee lastt characterr off eachh wordd inn thiss sentancee

***Remember how we used count before commands

DDelete the ffirst character oof each oother word

Delete Delete each other other word however however you want want

----------------

Larger jumps can be made by jumping to basic delimeters in a text based
file. '('s move by looking for periods, and '{'s move based on blank lines.
In a typical programming file, these characters aren't common, so you can
decide how helpful they are to you.

	( - move a sentance backward (based on periods)
	) - move a sentace forward
	{ - move a paragraph backward (based on empty lines)
	} - move a paragraph forward
	% - Find the matching bracket / paren

	((((( move ) between ) each ) paren) here)

----------------

Moving to the end or start of a line however can be incredibly useful in
programming. A main use for this would be adding tabs to the start of a line
or semicolans to the end

    0 - move to the start of a line
	_ or ^ - move to the first non blank character of a line
    $ - move to the end of the line

    DDelete the extra period on all of these sentances..

    TThen delete the first character on each of these sentances..

	TThen delete the extra spaces in front of these sentances..

----------------

In line searches for characters can be much quicker for traversing a line
than going word by word if you know what you are looking for. It is especially
helpful when going to a special character.

	f{char} - find the next occurence of the character given, cursor on char
	F{char} - find the previous occurence of the character given, cursor on char
	t{char} - find the next occurence, cursor to the left of the char 
	T{char} - find the previous occurence, cursor to the right of the char
	;       - repeat to find the next character for these commands

Fix the parens on ((x + 2))

Remove .the .third. period. in. this. sentance. 
*** you can also apply the count idea to these commands

Every time you find a i, add a semicolon before it.

----------------
SEARCHING

I dont need to tell you how important being able to search a document is, 
but a nice aspect of vim is that you can utilize regular expressions to 
create more specific searches

	/{pattern} - Search forward from the cursor
	?{pattern} - Search backwards from the cursor
	/^{pattern} - Search forward for things beggining with pattern
	?^{pattern} - Same but backwards
	/{pattern}$ - Search forward for a pattern at the end of the line 
	?{pattern}$ - Same but backwards
	*			- Search for the word that you have highlighted

	***HIT ENTER AFTER YOUR PATTERN

	n           - go to next element found by pattern
	N			- go to previous element found by pattern

Find the line number of the last time I typed move in this document:

Find the word that comes after the 3rd word line in this document:
***gg puts you at the top of a file

Find the last line where the end of the line is commands:

----------------

When jumping around your document quickly, or bouncing between a few spots 
in your document, it can be helpful to go to previous searches.

	^o - Go to previous line that you have been to
	^i - Go to the next line that you have been to

Go to the top of the file, then come right back

Traverse to the top of this section, then come back down

--------------------------------------------------------------------------
								MODIFICATION

As you have probably found out by now, inserting text with just i sucks.
Here you will find easier ways to enter into insert mode to add text.

----------------
INSERTS

	a - append to the end of the word that the cursor is on, enter insert mode
	A - append to the end of a line, entering insert mode
	I - Insert at the front of a line (after blank spaces) entering insert
	o - Begin a new line below the cursor, enter insert mode
	O - Begin a new line above the cursor, enter insert mode

**prepending to words is easiest with b (previous word start) then i

Add semi-colons to all of these lines

Finis al o thes word i thi sentanc wit appen
Insert a new line between these three lines
nsert an I at the start of this sentance

----------------
DELETION

	x - delete the character under (and with numbers given, after the cursor)	
	X - delete the character(s) before the cursor
	d{movement} - delete the character in a movement
		d$ - Delete from cursor to the end of the line
		d0 - Delete from cursor to the start of the line
		dw - Delete the next word
	dd - delete the current line
	D - delete from cursor to the end of the line	

Delete everything after <here> because this text isnt really all that good
Delete everthing before <here> because it sucked too
Just delete this line
Just delete these next 4 lines
remember
using numbers
before using
commands

delete 5 characters before and after <here> remembering numbers as well 

delete delete every every extra extra word word

----------------
REPLACING

	r{char} - Replace the character under the cursor with the char you give it
	R       - Insert mode for replacing characters
	~       - Switch the case of the current character

Replace all of the e's in this sentance with a's

Replace all of the characters in this line with e's

make this entire line uppercase

---------------
COPYING AND PASTING

What's that even mean? I only know the words:

	y  - yank text
	p  - place text
	yy - yank line
	dy - yank word

---------------
You know you can chain motions, right? Try that with yank (It's similar to chaining motions with d!)

Here is a sentence that you can mess around with


---------------
VISUAL MODE

	v (then your normal movement commands) select lines / letters/ words / etc. 
 			- You can do all the nice gestures you've learned in visual mode!
	<Shift-V> - Select lines
	<^v>      - Select collumns

---------------
EXERCISE

- Use line select on this thing:

    Here is a block of text this is a block of text
    you should play with this block of text
    by selecting things

- Select all the 1's and only the ones!
    000000000000000
    000001111100000
    000001111100000
    000001111100000
    000001111100000
    000000000000000

See what happens when
you paste
all the ones 
at the beginning of this
block of text

----------------
TABBING

One useful application for visual mode is being able to tab / untab multiple
lines. This is done with >> or << for tabbing or untabbing respectively

	>> - Shift a line one tab to the right
	<< - Shift a line one tab to the left

Tab this line
		Untab these two lines
		but use visual mode to select both

-----------------------------------------------------------------------
						TRICKY COOL ADVANCED THINGS

----------------
BASH COMMANDS

If you want to stay in vim, and still run basic commands where you would 
just exit out of vim to run one basic command then go back into your file,
you can use !. This is especially useful for running make's.

	:!{command} - Runs a unix command while in vim

Try to call the pwd command while in vim

----------------
SUBSTITUTION

Substitution allows you to replace all instances of a word with another
This becomes incredibly helpful when you change the name of a function.

Substitution is similar to searches, in that you can use complex regular
expressions to modify it, if you so choose. I will only cover the basic case.

	:%s/{pattern being change}/{pattern to change to}
		:%s/hello/goodbye - This would change all occurences of hello to goodbye

Change all occurences of line to spline

----------------
REGISTERS
    
    Hit "<letter>yy to yank line to register <letter> 
				(You can also use y, or select blocks of text, etc...)
    Hit "<letter>p to yank to register <letter>

----------------
Specialty Registers

	+ - System clipboard (Super useful when copying /pasting to clipboard)
	_ - The BLACKHOLE, register just sends whatever to oblivion.


---------------
EXERCISE
	
You have two things, and want to copy both and paste them in 
other places in that order! 
This isn't an ordinary text editor though, you've got /registers/, man.

Copy this line into a register
Copy this line into another register

(Now paste them around)

What's in your system clipboard right now? Let's find out! (paste it below and share with your friends)


...What other sick things can I do with registers though?

---------------
MACROS

but wait, let's first learn how to increment/decrement a number

---------------
INCREMENTING AND DECREMENTING

<C-x> decrements
<C-a> Increments (Note: If you are using tmux and you have 'a' bound like a smart person
                  Than unfortunately you'll have to hit a twice.)

----------------
EXERCISE

Increment this number: 0

---------------
BACK TO RECORDINGS

Saving a Recording
If you hit <q><register> followed by a sequence of keys then <q> once more to end the recording, all your
actions will be saved to <register>

PLAYING BACK A RECORDING
hit @<register> 
(NOTE: You can repeat this macro, for instance, 50 times by hitting 50@<register>)

---------------
EXERCISE

Record a macro which:
    - Copies the current line 
    - Increments the number found in the line
    - Do it 50 times

This is line number 1!

WINDOWS AND BUFFERS
----------------

You'll inevitably end up opening multiple buffers in vim, so it'd probably be useful to be able to
browse  between them, huh?

To open up a new buffer type :bn
To see your list of current buffers type :ls (NOTE: You can find a plugin which makes this functionality nicer..)
To switch between buffers type :b<number of buffer>

----------------
EXERCISE

	1) Open a new buffer
	2) :ls to see your new buffer

---------------
WINDOWS

Buffers are only sort of useful if you can't view things side-by-side 
(or up-and-down, or tiled as many times as you like)
Luckily, vim allows you to open seperate windows to your buffers!

NOTE: These require a magic touch. With one finger on control hit w, release control then hit the next key

	<C-w-v> or :vsplit opens a new vertical split
	<C-w-s> or :hsplit or :split Opens up a new horizontal split
	<C-w-c> Closes a split
	<C-w-|> Maximizes a split horizontally (Note that it looks like 
				a bar! Which is a way of remember it sorta I guess)
	<C-w-_> Maximizes a split vertically (Same dumb way of remembering 
				it as above)
	<C-w-=> Makes all your splits equal in size
	<C-w-h>, <C-w-j>, <C-w-k>, <C-w-l> Move between windows, just 
				like hjkl move within a buffer
	<C-w-H>, <C-w-J>, <C-w-K>,<C-w-L> Move the windows around in the
				direction you hit (Note that HJKL are caps'd)

---------------
EXERCISE

Make some windows! Use those buffers you made and place them around in nice ways. Open up a couple new files or
whatnot. Tile it up dude!

"Yeah, but what if I want a different way of viewing all my buffers?"A

---------------
TABS

:tabnew - Create a new tab
gt and gT - Move back and forth between tabs

---------------
EXERCISE

Stylize your vim buffers! Make two tabs with different views!

---------------
TMUX

Tmux is similar to making new tabs or windows, except instead of having new 
terminals, you are using the same terminal window with multiple sessions.

If this sounds strange, thats reasonable. Its much better to just try it out

You can do this by hitting :!tmux, it will open up a new session which will
be completely seperate than this one. So don't freak out when you cant get 
to your work. Come back here once you have done that.

Now you are in a tmux session and you can do some weird stuff.

	^b c (cntrl b then hit c, not holdin cntrl) will create a new window

A new window in tmux is like having a new tab in your terminal, and you can
see your current window at the bottom of the terminal, which number has
and * next to it.

	^b 1..9 - Swap to the window of the number that you give.
	^b p    - Swap to the previous window
	^b n    - Swap to the next window
	^b w    - Choose a window from a list
	^b &    - Kill the current window

Try creating a new window and swapping to it, and then back

You can also split up your current window into panes, especially useful
if you like to have multiple terminals up at once to look at.

	^b "    - Create a new horizontal pane
	^b %    - Create a new vertical pane
	^b (up-arrow) - Go up a pane
	^b (down-arrow) - Go down a pane
	^b (left-arrow) - Go left a pane
	^b (right-arrow) - Guess
	^b x    - Kill the current pane
		    ***You have to hit y to confirm

Try making an excessive amount of weird panes, just for fun


